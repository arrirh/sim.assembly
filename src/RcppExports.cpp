// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cc_mpd
arma::colvec cc_mpd(arma::umat cdm, arma::mat dist, bool ab);
RcppExport SEXP _sim_assembly_cc_mpd(SEXP cdmSEXP, SEXP distSEXP, SEXP abSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type cdm(cdmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type ab(abSEXP);
    rcpp_result_gen = Rcpp::wrap(cc_mpd(cdm, dist, ab));
    return rcpp_result_gen;
END_RCPP
}
// cc_mpd_v
double cc_mpd_v(arma::uvec cdm, arma::mat dist, bool ab);
RcppExport SEXP _sim_assembly_cc_mpd_v(SEXP cdmSEXP, SEXP distSEXP, SEXP abSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type cdm(cdmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type ab(abSEXP);
    rcpp_result_gen = Rcpp::wrap(cc_mpd_v(cdm, dist, ab));
    return rcpp_result_gen;
END_RCPP
}
// cc_rand_mpd
arma::colvec cc_rand_mpd(arma::umat cdm, arma::mat dist, bool ab);
RcppExport SEXP _sim_assembly_cc_rand_mpd(SEXP cdmSEXP, SEXP distSEXP, SEXP abSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type cdm(cdmSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type ab(abSEXP);
    rcpp_result_gen = Rcpp::wrap(cc_rand_mpd(cdm, dist, ab));
    return rcpp_result_gen;
END_RCPP
}
// make_cdm
arma::umat make_cdm(arma::umat id, int size, int S);
RcppExport SEXP _sim_assembly_make_cdm(SEXP idSEXP, SEXP sizeSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(make_cdm(id, size, S));
    return rcpp_result_gen;
END_RCPP
}
// make_cda
arma::ucube make_cda(arma::mat id, int size, int S);
RcppExport SEXP _sim_assembly_make_cda(SEXP idSEXP, SEXP sizeSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(make_cda(id, size, S));
    return rcpp_result_gen;
END_RCPP
}
// scaling_grain
arma::mat scaling_grain(arma::umat id, arma::mat dis, bool ab, int iter);
RcppExport SEXP _sim_assembly_scaling_grain(SEXP idSEXP, SEXP disSEXP, SEXP abSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type id(idSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dis(disSEXP);
    Rcpp::traits::input_parameter< bool >::type ab(abSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling_grain(id, dis, ab, iter));
    return rcpp_result_gen;
END_RCPP
}
// scaling_grain2
arma::mat scaling_grain2(arma::umat id, arma::mat dis, bool ab, int iter);
RcppExport SEXP _sim_assembly_scaling_grain2(SEXP idSEXP, SEXP disSEXP, SEXP abSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type id(idSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dis(disSEXP);
    Rcpp::traits::input_parameter< bool >::type ab(abSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling_grain2(id, dis, ab, iter));
    return rcpp_result_gen;
END_RCPP
}
// scaling_pool
arma::mat scaling_pool(arma::ucube cda, arma::mat dis, bool ab, int iter);
RcppExport SEXP _sim_assembly_scaling_pool(SEXP cdaSEXP, SEXP disSEXP, SEXP abSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ucube >::type cda(cdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dis(disSEXP);
    Rcpp::traits::input_parameter< bool >::type ab(abSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling_pool(cda, dis, ab, iter));
    return rcpp_result_gen;
END_RCPP
}
// scaling_coherent
arma::mat scaling_coherent(arma::ucube cda, arma::mat dis, bool ab, int iter);
RcppExport SEXP _sim_assembly_scaling_coherent(SEXP cdaSEXP, SEXP disSEXP, SEXP abSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ucube >::type cda(cdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dis(disSEXP);
    Rcpp::traits::input_parameter< bool >::type ab(abSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling_coherent(cda, dis, ab, iter));
    return rcpp_result_gen;
END_RCPP
}
// shannon
double shannon(NumericVector n);
RcppExport SEXP _sim_assembly_shannon(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(shannon(n));
    return rcpp_result_gen;
END_RCPP
}
// createCom
List createCom(NumericMatrix env, NumericVector niche, double nu, int range, double betaEnv, double betaComp, double betaAbund, double sigma);
RcppExport SEXP _sim_assembly_createCom(SEXP envSEXP, SEXP nicheSEXP, SEXP nuSEXP, SEXP rangeSEXP, SEXP betaEnvSEXP, SEXP betaCompSEXP, SEXP betaAbundSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type env(envSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type niche(nicheSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< int >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< double >::type betaEnv(betaEnvSEXP);
    Rcpp::traits::input_parameter< double >::type betaComp(betaCompSEXP);
    Rcpp::traits::input_parameter< double >::type betaAbund(betaAbundSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(createCom(env, niche, nu, range, betaEnv, betaComp, betaAbund, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cc_simCom
List cc_simCom(List com, int itNum, int report);
RcppExport SEXP _sim_assembly_cc_simCom(SEXP comSEXP, SEXP itNumSEXP, SEXP reportSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type com(comSEXP);
    Rcpp::traits::input_parameter< int >::type itNum(itNumSEXP);
    Rcpp::traits::input_parameter< int >::type report(reportSEXP);
    rcpp_result_gen = Rcpp::wrap(cc_simCom(com, itNum, report));
    return rcpp_result_gen;
END_RCPP
}
// cSAR
List cSAR(NumericMatrix id, NumericVector q);
RcppExport SEXP _sim_assembly_cSAR(SEXP idSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type id(idSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(cSAR(id, q));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sim_assembly_cc_mpd", (DL_FUNC) &_sim_assembly_cc_mpd, 3},
    {"_sim_assembly_cc_mpd_v", (DL_FUNC) &_sim_assembly_cc_mpd_v, 3},
    {"_sim_assembly_cc_rand_mpd", (DL_FUNC) &_sim_assembly_cc_rand_mpd, 3},
    {"_sim_assembly_make_cdm", (DL_FUNC) &_sim_assembly_make_cdm, 3},
    {"_sim_assembly_make_cda", (DL_FUNC) &_sim_assembly_make_cda, 3},
    {"_sim_assembly_scaling_grain", (DL_FUNC) &_sim_assembly_scaling_grain, 4},
    {"_sim_assembly_scaling_grain2", (DL_FUNC) &_sim_assembly_scaling_grain2, 4},
    {"_sim_assembly_scaling_pool", (DL_FUNC) &_sim_assembly_scaling_pool, 4},
    {"_sim_assembly_scaling_coherent", (DL_FUNC) &_sim_assembly_scaling_coherent, 4},
    {"_sim_assembly_shannon", (DL_FUNC) &_sim_assembly_shannon, 1},
    {"_sim_assembly_createCom", (DL_FUNC) &_sim_assembly_createCom, 8},
    {"_sim_assembly_cc_simCom", (DL_FUNC) &_sim_assembly_cc_simCom, 3},
    {"_sim_assembly_cSAR", (DL_FUNC) &_sim_assembly_cSAR, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_sim_assembly(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
